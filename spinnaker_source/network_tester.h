/**
 * SpiNNaker network_tester kernel.
 */

#ifndef NETWORK_TESTER_H
#define NETWORK_TESTER_H

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

/**
 * The granularity of all time related measurements in microseconds.
 */
#define TIME_GRANULARITY_USEC 100

/**
 * Available types of traffic generator.
 */
typedef enum traffic_node_type {
	TN_BERNOULLI = 0,
	TN_RELAY = 1,
} traffic_node_type_t;


/**
 * Information logged about the recipt of packets.
 */
typedef struct traffic_node_source {
	/**
	 * The routing key to use for traffic generated by this node with sequence
	 * number bits set to zero.
	 */
	uint32_t key;
	
	/**
	 * Number of packets received without a payload.
	 */
	uint32_t num_received;
	
	/**
	 * Number of packets received with a payload.
	 */
	uint32_t num_received_with_payload;
	
	/**
	 * Of the above counts, how many packets arrived out of order.
	 */
	uint32_t num_out_of_order;
} traffic_node_source_t;


/**
 * Information globally applicable to a traffic node (i.e. traffic
 * generator/consumers).
 */
typedef struct traffic_node_spec {
	/**
	 * The type of traffic to generate.
	 */
	traffic_node_type_t type;
	
	/**
	 * The routing key to use for traffic generated by this node with sequence
	 * number bits set to zero.
	 */
	uint32_t key;
	
	/**
	 * Should generated packets include a payload.
	 */
	bool payload;
	
	/**
	 * Number of packets sent in total.
	 */
	uint32_t num_sent;
	
	/**
	 * Number of different sources of packets to be sunk by this trafic node.
	 */
	size_t num_sources;
	
	/**
	 * An array of num_sources, sorted in ascending key order, where recieved
	 * packet information is logged.
	 */
	traffic_node_source_t *sources;
	
	/**
	 * The data associated with each type of traffic node.
	 */
	union {
		/**
		 * When type=TN_BERNOULLI, this contains the parameters to a Bernouli
		 * traffic model.
		 */
		struct {
			// Probability of a packet being sent each period. 0.0 - 1.0.
			double probability;
			
			// Number of microseconds between iterations of the traffic generator.
			uint32_t period;
			
			// Phase offset for the Bernoulli period (microseconds)
			uint32_t phase;
			
			// Number of packets to send when the packet generator decides to send a
			// packet
			uint32_t num_packets;
			
			// Number of microseconds between sending each of the num_packets
			uint32_t packet_interval;
		} bernoulli;
		
		/**
		 * When type=TN_RELAY, this contains the parameters to a relay
		 * traffic model.
		 */
		struct {
			// No parameters at present!
		} relay;
	} data;
} traffic_node_spec_t;


/**
 * Information globally applicable to a network node (i.e. core).
 */
typedef struct network_node_spec {
	/**
	 * A mask for bits of routing keys which hold the packet sequence number (must
	 * be a contiguous block from bit 0 onwards).
	 */
	uint32_t key_seq_mask;
	
	/**
	 * The number of traffic nodes this network node implements.
	 */
	size_t num_traffic_nodes;
	
	/**
	 * An array of pointers to num_traffic_nodes traffic node descriptions.
	 */
	traffic_node_spec_t **traffic_nodes;
} network_node_spec_t;


#endif
